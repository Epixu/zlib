name: CMake
on: [push, pull_request]
jobs:
  ci-cmake:
    name: ${{ matrix.name }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - name: Ubuntu GCC
            os: ubuntu-latest
            compiler: gcc

          # Test out of source builds
          - name: Ubuntu GCC OSB
            os: ubuntu-latest
            compiler: gcc
            build-dir: ../build
            src-dir: ../zlib

          - name: Ubuntu GCC -O3
            os: ubuntu-latest
            compiler: gcc
            cflags: -O3

          - name: Ubuntu Clang
            os: ubuntu-latest
            compiler: clang

          - name: Ubuntu Clang Debug
            os: ubuntu-latest
            compiler: clang
            build-config: Debug

          - name: Windows MSVC Win32
            os: windows-latest
            compiler: cl
            cmake-args: -A Win32

          - name: Windows MSVC Win32 (clang-cl)
            os: windows-latest
            compiler: clang-cl
            cmake-args: -G "Ninja" -DCMAKE_C_COMPILER=clang-cl -DCMAKE_C_FLAGS=-m32 -DCMAKE_MT="C:/Program Files (x86)/Windows Kits/10/bin/10.0.19041.0/x64/mt.exe"
            vcvars: cmd /c "C:/Program Files/Microsoft Visual Studio/2022/Enterprise/Common7/Tools/VsDevCmd.bat" -arch=x86 &&

          - name: Windows MSVC Win64
            os: windows-latest
            compiler: cl
            cmake-args: -A x64

          - name: Windows MSVC Win64 (clang-cl)
            os: windows-latest
            compiler: clang-cl
            cmake-args: -G "Ninja" -DCMAKE_C_COMPILER=clang-cl -DCMAKE_C_FLAGS=-m64 -DCMAKE_MT="C:/Program Files (x86)/Windows Kits/10/bin/10.0.19041.0/x64/mt.exe"
            vcvars: cmd /c "C:/Program Files/Microsoft Visual Studio/2022/Enterprise/Common7/Tools/VsDevCmd.bat" -arch=x64 &&

          - name: Windows GCC
            os: windows-latest
            compiler: gcc
            cmake-args: -G Ninja

          - name: macOS Clang
            os: macos-latest
            compiler: clang

          - name: macOS GCC
            os: macos-latest
            compiler: gcc-11

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Install packages (Windows)
      if: runner.os == 'Windows'
      run: |
        choco install --no-progress ninja ${{ matrix.packages }}

    - name: Generate project files
      run: ${{ matrix.vcvars }} cmake -S ${{ matrix.src-dir || '.' }} -B ${{ matrix.build-dir || '.' }} ${{ matrix.cmake-args }} -D CMAKE_VERBOSE_MAKEFILE=1 -D CMAKE_BUILD_TYPE=${{ matrix.build-config || 'Release' }}
      env:
        CC: ${{ matrix.compiler }}
        CFLAGS: ${{ matrix.cflags }}

    - name: Compile source code
      run: cmake --build ${{ matrix.build-dir || '.' }} --config ${{ matrix.build-config || 'Release' }}

    - name: Run test cases
      run: ctest -C Release --output-on-failure --max-width 120
      working-directory: ${{ matrix.build-dir || '.' }}

    - name: Upload build errors
      uses: actions/upload-artifact@v3
      if: failure()
      with:
        name: ${{ matrix.name }} (cmake)
        path: |
          **/CMakeFiles/CMakeOutput.log
          **/CMakeFiles/CMakeError.log
        retention-days: 7
